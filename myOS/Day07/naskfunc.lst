     1 00000000                                 ; ; nasmfunc.asm
     2 00000000                                 ; ; TAB=4
     3 00000000                                 
     4 00000000                                 ; section .text
     5 00000000                                 ; 		; 以下にこのプログラムに含まれる関数名を書いていく
     6 00000000                                 ; 		GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
     7 00000000                                 ; 		GLOBAL	io_in8, io_in16, io_in32
     8 00000000                                 ; 		GLOBAL	io_out8, io_out16, io_out32
     9 00000000                                 ; 		GLOBAL	io_load_eflags, io_store_eflags
    10 00000000                                 ; 		GLOBAL	load_gdtr, load_idtr
    11 00000000                                 ; 		GLOBAL	asm_inthandler21, asm_inthandler27, asm_inthandler2c
    12 00000000                                 ; 		EXTERN	inthandler21, inthandler27, inthandler2c
    13 00000000                                 
    14 00000000                                 
    15 00000000                                 ; ; 以下は実際の関数
    16 00000000                                 ; io_hlt:	; void io_hlt(void);
    17 00000000                                 ; 		HLT
    18 00000000                                 ; 		RET
    19 00000000                                 
    20 00000000                                 ; io_cli:
    21 00000000                                 ; 		CLI
    22 00000000                                 ; 		RET
    23 00000000                                 
    24 00000000                                 ; io_sti:
    25 00000000                                 ; 		STI
    26 00000000                                 ; 		RET
    27 00000000                                 
    28 00000000                                 ; io_stihlt:
    29 00000000                                 ; 		STI
    30 00000000                                 ; 		HLT
    31 00000000                                 ; 		RET
    32 00000000                                 
    33 00000000                                 ; io_in8:
    34 00000000                                 ; 		MOV			EDX, [ESP+4]	; port
    35 00000000                                 ; 		MOV			EAX, 0
    36 00000000                                 ; 		IN			AL, DX
    37 00000000                                 ; 		RET
    38 00000000                                 
    39 00000000                                 ; io_in16:
    40 00000000                                 ; 		MOV			EDX, [ESP+4]
    41 00000000                                 ; 		MOV			EAX, 0
    42 00000000                                 ; 		IN			AX, DX
    43 00000000                                 ; 		RET
    44 00000000                                 
    45 00000000                                 ; io_in32:
    46 00000000                                 ; 		MOV			EDX, [ESP+4]
    47 00000000                                 ; 		IN			EAX, DX
    48 00000000                                 ; 		RET
    49 00000000                                 
    50 00000000                                 ; io_out8:
    51 00000000                                 ; 		MOV			EDX, [ESP+4]		; port
    52 00000000                                 ; 		MOV			AL, [ESP+8]			; data
    53 00000000                                 ; 		OUT			DX, AL
    54 00000000                                 ; 		RET
    55 00000000                                 
    56 00000000                                 ; io_out16:
    57 00000000                                 ; 		MOV			EDX, [ESP+4]
    58 00000000                                 ; 		MOV			EAX, [ESP+8]
    59 00000000                                 ; 		OUT			DX, AX
    60 00000000                                 ; 		RET
    61 00000000                                 
    62 00000000                                 ; io_out32:
    63 00000000                                 ; 		MOV			EDX, [ESP+4]
    64 00000000                                 ; 		MOV			EAX, [ESP+8]
    65 00000000                                 ; 		OUT			DX, EAX
    66 00000000                                 ; 		RET
    67 00000000                                 
    68 00000000                                 ; io_load_eflags:
    69 00000000                                 ; 		PUSHFD		; PUSH EFLAGS という意味……らしい
    70 00000000                                 ; 		POP			EAX
    71 00000000                                 ; 		RET
    72 00000000                                 
    73 00000000                                 ; io_store_eflags:
    74 00000000                                 ; 		MOV			EAX, [ESP+4]
    75 00000000                                 ; 		PUSH		EAX
    76 00000000                                 ; 		POPFD		; POP EFLAGS という意味っぽい
    77 00000000                                 ; 		RET
    78 00000000                                 
    79 00000000                                 ; load_gdtr:		; void load_gdtr(int limit, int addr);
    80 00000000                                 ; 		MOV		AX,[ESP+4]		; limit
    81 00000000                                 ; 		MOV		[ESP+6],AX
    82 00000000                                 ; 		LGDT	[ESP+6]
    83 00000000                                 ; 		RET
    84 00000000                                 
    85 00000000                                 ; load_idtr:		; void load_idtr(int limit, int addr);
    86 00000000                                 ; 		MOV		AX,[ESP+4]		; limit
    87 00000000                                 ; 		MOV		[ESP+6],AX
    88 00000000                                 ; 		LIDT	[ESP+6]
    89 00000000                                 ; 		RET
    90 00000000                                 
    91 00000000                                 ; asm_inthandler21:
    92 00000000                                 ; 		PUSH	ES
    93 00000000                                 ; 		PUSH	DS
    94 00000000                                 ; 		PUSHAD
    95 00000000                                 ; 		MOV		EAX,ESP
    96 00000000                                 ; 		PUSH	EAX
    97 00000000                                 ; 		MOV		AX,SS
    98 00000000                                 ; 		MOV		DS,AX
    99 00000000                                 ; 		MOV		ES,AX
   100 00000000                                 ; 		CALL	inthandler21
   101 00000000                                 ; 		POP		EAX
   102 00000000                                 ; 		POPAD
   103 00000000                                 ; 		POP		DS
   104 00000000                                 ; 		POP		ES
   105 00000000                                 ; 		IRETD
   106 00000000                                 
   107 00000000                                 ; asm_inthandler27:
   108 00000000                                 ; 		PUSH	ES
   109 00000000                                 ; 		PUSH	DS
   110 00000000                                 ; 		PUSHAD
   111 00000000                                 ; 		MOV		EAX,ESP
   112 00000000                                 ; 		PUSH	EAX
   113 00000000                                 ; 		MOV		AX,SS
   114 00000000                                 ; 		MOV		DS,AX
   115 00000000                                 ; 		MOV		ES,AX
   116 00000000                                 ; 		CALL	inthandler27
   117 00000000                                 ; 		POP		EAX
   118 00000000                                 ; 		POPAD
   119 00000000                                 ; 		POP		DS
   120 00000000                                 ; 		POP		ES
   121 00000000                                 ; 		IRETD
   122 00000000                                 
   123 00000000                                 ; asm_inthandler2c:
   124 00000000                                 ; 		PUSH	ES
   125 00000000                                 ; 		PUSH	DS
   126 00000000                                 ; 		PUSHAD
   127 00000000                                 ; 		MOV		EAX,ESP
   128 00000000                                 ; 		PUSH	EAX
   129 00000000                                 ; 		MOV		AX,SS
   130 00000000                                 ; 		MOV		DS,AX
   131 00000000                                 ; 		MOV		ES,AX
   132 00000000                                 ; 		CALL	inthandler2c
   133 00000000                                 ; 		POP		EAX
   134 00000000                                 ; 		POPAD
   135 00000000                                 ; 		POP		DS
   136 00000000                                 ; 		POP		ES
   137 00000000                                 ; 		IRETD
   138 00000000                                 
   139 00000000                                 
   140 00000000                                 ; naskfunc
   141 00000000                                 ; TAB=4
   142 00000000                                 
   143 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
   144 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
   145 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
   146 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
   147 00000000                                 
   148 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
   149 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
   150 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
   151 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
   152 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
   153 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
   154 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c
   155 00000000                                 
   156                                          [SECTION .text]
   157 00000000                                 
   158 00000000                                 _io_hlt:	; void io_hlt(void);
   159 00000000 F4                              		HLT
   160 00000001 C3                              		RET
   161 00000002                                 
   162 00000002                                 _io_cli:	; void io_cli(void);
   163 00000002 FA                              		CLI
   164 00000003 C3                              		RET
   165 00000004                                 
   166 00000004                                 _io_sti:	; void io_sti(void);
   167 00000004 FB                              		STI
   168 00000005 C3                              		RET
   169 00000006                                 
   170 00000006                                 _io_stihlt:	; void io_stihlt(void);
   171 00000006 FB                              		STI
   172 00000007 F4                              		HLT
   173 00000008 C3                              		RET
   174 00000009                                 
   175 00000009                                 _io_in8:	; int io_in8(int port);
   176 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   177 0000000D B8 00000000                     		MOV		EAX,0
   178 00000012 EC                              		IN		AL,DX
   179 00000013 C3                              		RET
   180 00000014                                 
   181 00000014                                 _io_in16:	; int io_in16(int port);
   182 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   183 00000018 B8 00000000                     		MOV		EAX,0
   184 0000001D 66 ED                           		IN		AX,DX
   185 0000001F C3                              		RET
   186 00000020                                 
   187 00000020                                 _io_in32:	; int io_in32(int port);
   188 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   189 00000024 ED                              		IN		EAX,DX
   190 00000025 C3                              		RET
   191 00000026                                 
   192 00000026                                 _io_out8:	; void io_out8(int port, int data);
   193 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   194 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
   195 0000002E EE                              		OUT		DX,AL
   196 0000002F C3                              		RET
   197 00000030                                 
   198 00000030                                 _io_out16:	; void io_out16(int port, int data);
   199 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   200 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
   201 00000038 66 EF                           		OUT		DX,AX
   202 0000003A C3                              		RET
   203 0000003B                                 
   204 0000003B                                 _io_out32:	; void io_out32(int port, int data);
   205 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   206 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
   207 00000043 EF                              		OUT		DX,EAX
   208 00000044 C3                              		RET
   209 00000045                                 
   210 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
   211 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
   212 00000046 58                              		POP		EAX
   213 00000047 C3                              		RET
   214 00000048                                 
   215 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
   216 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
   217 0000004C 50                              		PUSH	EAX
   218 0000004D 9D                              		POPFD		; POP EFLAGS という意味
   219 0000004E C3                              		RET
   220 0000004F                                 
   221 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
   222 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   223 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
   224 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
   225 0000005E C3                              		RET
   226 0000005F                                 
   227 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   228 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   229 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   230 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   231 0000006E C3                              		RET
   232 0000006F                                 
   233 0000006F                                 _asm_inthandler21:
   234 0000006F 06                              		PUSH	ES
   235 00000070 1E                              		PUSH	DS
   236 00000071 60                              		PUSHAD
   237 00000072 89 E0                           		MOV		EAX,ESP
   238 00000074 50                              		PUSH	EAX
   239 00000075 66 8C D0                        		MOV		AX,SS
   240 00000078 8E D8                           		MOV		DS,AX
   241 0000007A 8E C0                           		MOV		ES,AX
   242 0000007C E8 [00000000]                   		CALL	_inthandler21
   243 00000081 58                              		POP		EAX
   244 00000082 61                              		POPAD
   245 00000083 1F                              		POP		DS
   246 00000084 07                              		POP		ES
   247 00000085 CF                              		IRETD
   248 00000086                                 
   249 00000086                                 _asm_inthandler27:
   250 00000086 06                              		PUSH	ES
   251 00000087 1E                              		PUSH	DS
   252 00000088 60                              		PUSHAD
   253 00000089 89 E0                           		MOV		EAX,ESP
   254 0000008B 50                              		PUSH	EAX
   255 0000008C 66 8C D0                        		MOV		AX,SS
   256 0000008F 8E D8                           		MOV		DS,AX
   257 00000091 8E C0                           		MOV		ES,AX
   258 00000093 E8 [00000000]                   		CALL	_inthandler27
   259 00000098 58                              		POP		EAX
   260 00000099 61                              		POPAD
   261 0000009A 1F                              		POP		DS
   262 0000009B 07                              		POP		ES
   263 0000009C CF                              		IRETD
   264 0000009D                                 
   265 0000009D                                 _asm_inthandler2c:
   266 0000009D 06                              		PUSH	ES
   267 0000009E 1E                              		PUSH	DS
   268 0000009F 60                              		PUSHAD
   269 000000A0 89 E0                           		MOV		EAX,ESP
   270 000000A2 50                              		PUSH	EAX
   271 000000A3 66 8C D0                        		MOV		AX,SS
   272 000000A6 8E D8                           		MOV		DS,AX
   273 000000A8 8E C0                           		MOV		ES,AX
   274 000000AA E8 [00000000]                   		CALL	_inthandler2c
   275 000000AF 58                              		POP		EAX
   276 000000B0 61                              		POPAD
   277 000000B1 1F                              		POP		DS
   278 000000B2 07                              		POP		ES
   279 000000B3 CF                              		IRETD
